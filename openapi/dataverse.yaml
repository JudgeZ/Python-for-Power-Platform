openapi: 3.0.3
info:
  title: Microsoft Dataverse Web API (v9.2)
  version: 0.5.0
  description: |
    Dataverse OData v4: Solutions, Publish, WhoAmI, generic entity CRUD, annotations (documentbody),
    and $batch with per-operation results (HTTP 200). Upsert supports alternate keys and If-Match/If-None-Match.
servers:
  - url: https://{org}.crm.dynamics.com/api/data/v9.2
    variables:
      org:
        default: yourorg
        description: Dataverse org subdomain (e.g., contoso)
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/v2.0/authorize
          tokenUrl: https://login.microsoftonline.com/common/oauth2/v2.0/token
          scopes:
            https://{org}.crm.dynamics.com/.default: Dataverse org default scope
  parameters:
    PreferContinueOnError:
      name: Prefer
      in: header
      required: false
      schema: { type: string, enum: ["odata.continue-on-error"] }
      description: Continue other operations when one fails in $batch.
    PreferReturnRepresentation:
      name: Prefer
      in: header
      required: false
      schema: { type: string, enum: ["return=representation"] }
      description: Return representation to distinguish update (200) vs create (201).
    IfMatchAny:
      name: If-Match
      in: header
      required: false
      schema: { type: string, enum: ["*"] }
      description: Force update-only behavior for PATCH.
    IfNoneMatchAny:
      name: If-None-Match
      in: header
      required: false
      schema: { type: string, enum: ["*"] }
      description: Force create-only behavior for PATCH.
security:
  - oauth2: [https://{org}.crm.dynamics.com/.default]
paths:
  /solutions:
    get:
      summary: List solutions
      operationId: dv_listSolutions
      parameters:
        - name: $select
          in: query
          schema: { type: string }
        - name: $filter
          in: query
          schema: { type: string }
        - name: $top
          in: query
          schema: { type: integer, minimum: 1, maximum: 5000 }
      responses:
        "200":
          description: Solutions
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items: { $ref: "#/components/schemas/Solution" }
                  "@odata.nextLink": { type: string }
  /ExportSolution:
    post:
      summary: Export solution
      operationId: dv_exportSolution
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ExportSolutionRequest" }
      responses:
        "200":
          description: Export payload (base64 zip)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ExportSolutionFile: { type: string, format: byte }
  /ImportSolution:
    post:
      summary: Import solution
      operationId: dv_importSolution
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ImportSolutionRequest" }
      responses:
        "204": { description: Accepted/Completed }
  /PublishAllXml:
    post:
      summary: Publish all customizations
      operationId: dv_publishAllXml
      responses:
        "204": { description: Published }
  /WhoAmI:
    get:
      summary: WhoAmI (current user)
      operationId: dv_whoAmI
      responses:
        "200":
          description: Identity payload
          content:
            application/json:
              schema: { type: object, additionalProperties: true }
  /$batch:
    post:
      summary: OData $batch (per-operation results)
      operationId: dv_batch
      parameters:
        - $ref: "#/components/parameters/PreferContinueOnError"
      requestBody:
        required: true
        content:
          multipart/mixed:
            schema:
              type: string
              description: Raw multipart/mixed body per OData v4 spec.
      responses:
        "200":
          description: OK (multipart/mixed with per-op results)
          content:
            multipart/mixed:
              schema: { type: string }
  /annotations:
    get:
      summary: List annotations (Notes) including documentbody (file)
      operationId: dv_listAnnotations
      parameters:
        - name: $select
          in: query
          schema: { type: string, default: "annotationid,filename,documentbody,_objectid_value" }
        - name: $filter
          in: query
          schema: { type: string }
        - name: $top
          in: query
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: Annotations
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items: { type: object, additionalProperties: true }
  /{entityset}:
    post:
      summary: Create record
      operationId: dv_createRecord
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "204": { description: Created (Location/OData-EntityId header contains url) }
        "201":
          description: Created (representation) when Prefer return=representation is used
          content:
            application/json: { schema: { type: object } }
    get:
      summary: List records
      operationId: dv_listRecords
      parameters:
        - name: $select
          in: query
          schema: { type: string }
        - name: $filter
          in: query
          schema: { type: string }
        - name: $orderby
          in: query
          schema: { type: string }
        - name: $top
          in: query
          schema: { type: integer, minimum: 1, maximum: 5000 }
      responses:
        "200":
          description: Records
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items: { type: object, additionalProperties: true }
  /{entityset}({key}):
    get:
      summary: Get record by key (GUID or alternate key expression)
      operationId: dv_getRecord
      parameters:
        - name: key
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Record
          content:
            application/json:
              schema: { type: object, additionalProperties: true }
    patch:
      summary: Upsert/Update record
      description: >
        PATCH using primary GUID or alternate key (e.g., /accounts(accountnumber='ABC123')).
        Use If-Match: * for update-only; If-None-Match: * for create-only.
      operationId: dv_upsertRecord
      parameters:
        - $ref: "#/components/parameters/IfMatchAny"
        - $ref: "#/components/parameters/IfNoneMatchAny"
        - $ref: "#/components/parameters/PreferReturnRepresentation"
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        "204": { description: Updated (no content) }
        "200":
          description: Updated (representation) when Prefer return=representation is used
          content:
            application/json: { schema: { type: object } }
        "201":
          description: Created (representation) when Prefer return=representation is used and record created
          content:
            application/json: { schema: { type: object } }
        "412": { description: Precondition Failed if If-None-Match used and record exists }
    delete:
      summary: Delete record
      operationId: dv_deleteRecord
      responses:
        "204": { description: Deleted }
components:
  schemas:
    Solution:
      type: object
      additionalProperties: true
      properties:
        solutionid: { type: string, format: uuid }
        uniquename: { type: string }
        friendlyname: { type: string }
        version: { type: string }
    ExportSolutionRequest:
      type: object
      required: [SolutionName, Managed]
      properties:
        SolutionName: { type: string }
        Managed: { type: boolean }
    ImportSolutionRequest:
      type: object
      required: [CustomizationFile]
      properties:
        CustomizationFile:
          type: string
          format: byte
          description: Base64-encoded solution ZIP
        ImportJobId:
          type: string
          format: uuid
          description: Optional job id to track long-running import
